"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CSVParser = void 0;
const fast_csv_1 = require("fast-csv");
const stream_1 = require("stream");
/**
 * CSV Parser class
 */
class CSVParser {
    constructor(settings) {
        this.settings = settings.fastcsvParams || {};
        this.subscribe = settings.subscribe || ((json) => json);
    }
    /**
     * parse
     */
    parse(data) {
        return __awaiter(this, void 0, void 0, function* () {
            const readable = new stream_1.Readable();
            readable.push(data);
            readable.push(null);
            return new Promise((resolve, reject) => {
                const resulsArray = [];
                readable
                    .pipe(fast_csv_1.parse(this.settings))
                    .on("error", (error) => {
                    reject(error);
                })
                    .on("data", (row) => {
                    resulsArray.push(this.subscribe(row));
                })
                    .on("end", (rowCount) => {
                    return resolve(resulsArray);
                });
            });
        });
    }
}
exports.CSVParser = CSVParser;
//# sourceMappingURL=CSVParser.js.map